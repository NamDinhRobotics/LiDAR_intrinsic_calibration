function results = showCalibratedNumericalResults(calibrated_p2p_distance, original_p2p_distance)
    disp("Showing numerical results...")
    disp("Showing current estimate")
    results = struct('ring', {calibrated_p2p_distance(end).ring(:).ring}, ...
                     'num_points', {calibrated_p2p_distance(end).ring(:).num_points}, ...
                     'mean_original', {original_p2p_distance.ring(:).mean}, ...
                     'mean_calibrated', {calibrated_p2p_distance(end).ring(:).mean}, ...
                     'mean_percentage', num2cell((abs([original_p2p_distance.ring(:).mean]) - abs([calibrated_p2p_distance(end).ring(:).mean])) ./ abs([original_p2p_distance.ring(:).mean])), ...
                     'mean_diff', num2cell([original_p2p_distance.ring(:).mean] - [calibrated_p2p_distance(end).ring(:).mean]), ...
                     'mean_diff_in_mm', num2cell(([original_p2p_distance.ring(:).mean] - [calibrated_p2p_distance(end).ring(:).mean]) * 1e3), ...
                     'std_original', {original_p2p_distance.ring(:).std}, ...
                     'std_calibrated', {calibrated_p2p_distance(end).ring(:).std}, ...
                     'std_diff', num2cell([original_p2p_distance.ring(:).std] - [calibrated_p2p_distance(end).ring(:).std]), ...
                     'std_diff_in_mm', num2cell(([original_p2p_distance.ring(:).std] - [calibrated_p2p_distance(end).ring(:).std])* 1e3));
    struct2table(calibrated_p2p_distance(end).ring(:))
    disp("Showing comparison")
    struct2table(results)
end